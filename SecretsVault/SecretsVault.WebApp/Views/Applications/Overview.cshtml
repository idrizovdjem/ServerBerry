@using SecretsVault.ViewModels.Application
@using SecretsVault.ViewModels.Secret
@model ApplicationOverviewViewModel

@{ 
    ViewData["Title"] = "Overview";
}

<style>
    pre {
        margin: 0;
        white-space: pre;
    }
</style>

<main class="container">
    <h3 class="mb-3">@Model.Name</h3>
    
    <a class="btn btn-primary text-light" asp-controller="Secrets" asp-action="Create" asp-route-applicationId="@Model.Id"><i class="fas fa-plus mr-3"></i>Add secret</a>

    <a class="btn btn-danger text-light" asp-controller="Applications" asp-action="Delete" asp-route-applicationId="@Model.Id"><i class="fas fa-trash mr-3"></i>Delete application</a>

    <table class="table table-striped table-hover mt-3">
        <thead>
            <tr>
                <th width="30%">Key</th>
                <th width="30%">Environment</th>
                <th width="25%">Value</th>
                <th width="15%">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach(SecretOverviewViewModel secret in Model.Secrets)
            {
                <tr>
                    <td class="align-middle"><pre>@secret.Key</pre></td>
                    <td class="align-middle"><pre>@secret.Environment</pre></td>
                    <td class="align-middle">@(new string('*', 10))</td>
                    <td>
                        <button class="btn btn-info passwordShowHideElement"><i class="fas fa-eye"></i></button>
                        <a asp-controller="Secrets" asp-action="Edit" asp-route-secretId="@secret.Id" class="btn btn-secondary text-light editElement"><i class="fas fa-pen"></i></a>
                        <button class="btn btn-danger deleteElement"><i class="fas fa-trash"></i></button>
                    </td>
                    <input type="hidden" value="@secret.Id"/>
                </tr>
            }
        </tbody>
    </table>
</main>

@section Scripts {
    <script async>
        function handleShowHideElements() {
            const passwordShowHideElements = Array.from(document.getElementsByClassName('passwordShowHideElement'));
            passwordShowHideElements.forEach(element => {
                let visible = false;

                element.onclick = async (event) => {
                    visible = !visible;
                    element.innerHTML = visible ? '<i class="fas fa-eye-slash"></i>' : '<i class="fas fa-eye"></i>';

                    let secretValue = '**********';
                    const rowElement = element.parentElement.parentElement;

                    if (visible === true) {
                        const key = rowElement.children[0].innerText;
                        const environment = rowElement.children[1].innerText;
                        secretValue = await getSecretValue(key, environment);
                    }

                    rowElement.children[2].innerText = secretValue
                }
            });
        }

        function handleDeleteElements() {
            const deleteElements = Array.from(document.getElementsByClassName('deleteElement'));
            deleteElements.forEach((element, index) => {
                element.onclick = async (event) => {
                    const confirmDelete = confirm('Are you sure you want to delete this secret?');
                    if (confirmDelete === false) {
                        return;
                    }

                    const parentElement = element.parentElement.parentElement;
                    const secretId = parentElement.lastElementChild.value;
                    deleteSecret(secretId);
                    parentElement.remove();
                }
            });
        }

        handleShowHideElements();
        handleDeleteElements();

        async function getSecretValue(key, environment) {
            return await fetch('/api/secrets/GetSecretValue', {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ key, environment, applicationId: '@Model.Id' })
            })
                .then(response => response.text())
                .then(data => data)
                .catch(error => '');
        }

        function deleteSecret(secretId) {
            fetch('/api/secrets/DeleteSecret', {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ secretId })
            })
                .catch(error => '');
        }
    </script>
}